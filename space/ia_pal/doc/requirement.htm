<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
</head>


<body>


<h1 style="text-align: center;">PAL Query Improvement </h1>

<p style="text-align: center;">Li Bo, Steve Guest, Maohai Huang</p>

<p style="text-align: center;">2007-02-16</p>


<h2>0. Scope and Goals</h2>
<br>
This document explains the features implemented&nbsp;by the PAL Query
Improvment package. Some incompleted features are listed at the end.<br>
<br>
User feedback is sought after to improve and focus this package.<br>
<br>
The goal of this package include<br>

1) to streamline query syntax;
    <br>

2) to set no artificial limit on what can or cannot be queried from the user point
    of view. Context, data, attributes, and anything with an iterator should be queried;
    <br>

3) to make it possible to optimize query by the pool.

<h2>1. Query Syntax Simplification</h2>

<h3>1.1 Syntax simplification</h3>

The query API should allow simple, non-cluttered syntax to be executed.<br>

e.g.
<pre>q=MetaQuery(Product,"p","p.instrument=='SPIRE'") </pre>

can be simplified to:
<pre>q=Query("instrument=='SPIRE'") </pre>


Here is another example, queried on specified objects:
<pre>q = FullQuery (SpectrometerDetectorSpectrum, "s", "s[A1][flux].data &gt; 0.01") </pre>

is converted to
<pre>q = Query (SpectrometerDetectorSpectrum, "[A1][flux].data &gt; 0.01") </pre>


<h3>1.2 Automatically Choosen Query Type</h3>

Now FullQuery, MetaQuery and AttribQuery can be chosen automatically for the user. For example:
<pre>q = Query ("instrument='Foo' and width&gt;=200 ")</pre>

is internally converted to 
<pre>q = MetaQuery ("Product","p","p.meta.containsKey('width') and instrument ='Foo'and p.meta['width'].value &gt;=200") </pre>
In this example if only &ldquo;instrument&rdquo; is present it would be
an AttribQuery. If any query parameter name is not associated with an
attribute it is assumed to be a metadata name.
<br>
 
The following example is a FullQuery:
<pre>
#data mining query
query=Query("['myTable']['x'].data[20] > 10")
#query.where will be converted to: 
#  p.containsKey('myTable') and p['myTable']['x'].data [20 ]>10 
print query.where
#queryType is FullQuery
print query.queryType 
</pre>

<h2>2. Unification of Metadata Query</h2>

<h3>2.1 Unified Metadata Query Syntax</h3>

Metadata can be queried in the same way as other types of query. For example:
<pre>q = Query ("instrument='Foo' and width>=200 ")</pre>

will work if &ldquo;width&rdquo; is a metadata item of the Products being queried, it will be converted to: 
<pre>MetaQuery(Product, "p","p.meta.containsKey('width') and instrument ='Foo'and p.meta['width'].value >=200" )</pre>

<h3>2.2 Robust handling of metadata</h3>

In the above example if the Product does not have metadata named &ldquo;width&rdquo;, 
by default it will be quietly ignored .

This can be overridden by setting property hcss.ia.pal.query.isNonExistFieldsIgnored to &lsquo;false&rsquo;, 
in which case the user will get a complaint. For Example:     
<pre>    
query = Query ("instrument='Foo' and width>=200 ")	
# User could specify whether non-existent meta data or attributes appearing in the query should be quietly ignored
# The default value is true, configured with hcss.ia.pal.query.isNonExistFieldsIgnored in herschel\ia\pal\defns\pal.xml
query.setNonExistFieldsIgnored(0)
#query.where will be converted to: 
#  instrument ='Foo'and p.meta['width'].value >=200
print query.where
# if set to true, an extra clause "p.meta.containsKey('width')" will be added in the parsed query
query.setNonExistFieldsIgnored(1)
#query.where will be converted to: 
#  p.meta.containsKey('width') and instrument ='Foo'and p.meta['width'].value >=200
print query.where
</pre>
<h2>3. JIDE session namespace awareness </h2>

User defined variables and functions in the JIDE session could be used in query. For Example:
<pre> <br>#dummy user defined function<br>def sum(a,c):<br>	return a+c<br><br>#query with user defined function<br>a=3<br>c=4<br><br>q=Query("type=='AbcProduct' and creator=='Scott' and sum(a, c)&gt;0")<br># will be converted to: <br>#  p.type =='AbcProduct'and p.creator =='Scott'and sum (a , c)&gt;0 <br>print query.where<br><br>#queryType is AttribQuery<br>print query.queryType<br><br>results=store.select(query);<br>print results<br></pre>


<h2>4. Nonfunctional Requirements</h2>
 
Minimize or avoid changing existing classes. 
<br>

Files added:
 
<ul>
<li>
herschel.ia.pal.query.Query</li> 
<li>herschel.ia.pal.query.parser.PALParser</li>
<li>herschel.ia.pal.query.parser.ParseException</li>
<li>scripts\pal\_init_.py
</li>
<li>scripts\pal\keyword.py</li>
 
<li>scripts\pal\parser.py</li>
<li>scripts\pal\StringIO.py</li> 
<li>scripts\pal\token.py</li> 
<li>scripts\pal\tokenize.py</li>
<li>herschel\ia\pal\defns\pal.xml</li>
</ul>
<br>
Files modified:
<ul>
<li>herschel\share\property\xml_locations.txt</li>
 
<br>	add an entry: hcss.ia.pal herschel/ia/pal/defns/pal     false
<li>herschel.ia.pal.pool.lstore.FitsProductPool</li>
<br>
	For the feature "JIDE session namespace awareness", we made the one line modification: 
	<pre>
	_jython = JIDEUtilities.getCallingInterpreter();
	</pre>
	The 
modification will be refactered to 
herschel.share.interpreter
 finally.
</ul>
<h2>5. Features not Yet implemented</h2>
This section lists features that have not been implemented fully but are under investigation.<br>


<h3>5.1. Execution Optimization</h3>
If a query has &ldquo;and&rdquo; and &ldquo;or&rdquo; Boolean operands,
and certain part of the query is formed with standard product
attributes and scalar(s), or variables of scalar values, such part of
the query is passed to the pool to optimize, using specialized query
such as AttribQuery(). The collection of products returned by the pool
will be used to complete full expression evalueation.
For example:

<pre>query("instrument == 'SPIRE' and xxxx")</pre>


is converted to<br>
1) AttribQuery('p.instrument == 'SPIRE')<br>
2) query('xxxx') on the result of step 1) 

<pre>query("instrument == 'SPIRE' or xxxx")</pre>

cannot be optimized the same way however. 

<h3>5.2 Attributes of Attributes</h3>

    q = Query(&ldquo;foo.bar &gt;= 4&rdquo;)
where foo is an attribute does not work properly, although ("['mytable'].value&gt;=4") does.<br>

    <br>


<h3>5.3 Adaptability expanding</h3>

This package does not support query "anything with an iterator".<br>

<h2>
6. Appendix</h2>
 
<h3>6.1  How to run the demo</h3>
<ul>
 
	<li>add classes/** to the HCSS classpath, this also implicitly add herschel/ia/pal/defns/pal.xml(with directory) to the HCSS classpath </li> 
	<li>modify the herschel/share/property/xml_locations.txt, add an entry: " hcss.ia.pal herschel/ia/pal/defns/pal     false "</li>
	<li>add scripts/pal/** to the HCSS jython scripts path </li>
	<li>start JIDE to run the scripts/pal_api_demo.py </li> 
</ul> 
 
 </body>
</html>
