/* $Id: StorageManager.java,v 1.22 2008/10/07 12:11:53 bli Exp $ * Copyright (c) 2008 ESA, STFC */package herschel.ia.pal;import herschel.ia.pal.managers.StorageConfigReader;import herschel.ia.pal.managers.jython.JythonStorageConfigReader;import herschel.ia.pal.managers.xml.XmlStorageConfigReader;import herschel.share.util.Configuration;import herschel.share.util.ConfigurationException;import java.util.ArrayList;import java.util.Enumeration;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.logging.Logger;/** * Manages one or more pre-configured {@link ProductStorage} instances. To do * this, specify a property of the form * <code>hcss.ia.pal.store.&lt;id&gt;</code>, where <code>id</code> is the * name you wish to assign to that storage for future reference. * </p> * <p> * The value of the property can be either: * <ol> * <li> A <em>list</em> property, containing a list of pool ids that will * define the storage. The first item in the list represents the * <em>writable</em> pool. For example: *  * <pre> * hcss.ia.pal.store.mystore= {cal, level0, level1} * </pre> *  * </li> * <li> The location of a configuration file defining that storage, as a fully * qualified file path. These files can be either a Jython or an XML format. See * the PAL Guide for full details of how to write such files. </li> * </ol> *  * The property <code> hcss.ia.pal.defaultstore </code> is used to specify the * default {@link ProductStorage}. * </p> *  * @see PoolManager * @see herschel.share.util.Configuration * @author hsiddiqu *  */public class StorageManager {	@SuppressWarnings("unused")	private static final Logger LOG = Logger.getLogger(StorageManager.class			.getName());	private static final String PROP_ROOT = "hcss.ia.pal.store.";	private static StorageManager INSTANCE;	private static final StorageConfigReader XML_READER = new XmlStorageConfigReader();	private static final StorageConfigReader JYTHON_READER = new JythonStorageConfigReader();	private Map<String, ProductStorage> _storages = new HashMap<String, ProductStorage>();	private List<String> _idList = new ArrayList<String>();	private StorageManager() {	}	/**	 * read and load all configured storage	 */	private void init() {		// XXX: SPR-4539		Enumeration<Object> keys = Configuration.getProperties().keys();		while (keys.hasMoreElements()) {			String key = (String) keys.nextElement();			if (key.startsWith(PROP_ROOT)) {				String id = key.substring(PROP_ROOT.length());				_idList.add(id);				// getStorage(id);			}		}	}	/**	 * Returns all the string representation of the configured stores without	 * initializing any of them	 * 	 * Added for SPR-4539	 * 	 * @return all the string representation of the configured stores	 * @deprecated	 * 	 */	public List<String> getIDList() {		return getIdList();	}		/**	 * Returns all the string representation of the configured stores without	 * initializing any of them	 * 	 * Added for SPR-4539	 * 	 * @return all the string representation of the configured stores	 */	public List<String> getIdList() {		return _idList;	}	/**	 * Check if this StorageManager contains a storage of a given id.	 * 	 * @param id	 *            of the storage	 * @return true if a storage exists	 */	public static boolean hasStorage(String id) {		return getInstance()._storages.containsKey(id);	}	/**	 * Get the storage of a given name.	 * <p>	 * If the storage does not exist, null is returned.	 * </p>	 * 	 * @param name	 *            Name of storage	 * @return the storage corresponding to the name, null otherwise.	 */	public static ProductStorage getStorage(String name) {		return getInstance().get(name);	}	/**	 * Jython only. Returns the ProductStorage corresponding to the supplied id.	 * 	 * @param id	 *            to lookup	 * @return ProductStorage for that id	 */	public ProductStorage __getitem__(String id) {		return get(id);	}	private ProductStorage get(String id) {		// First check the map		ProductStorage storage = _storages.get(id);		if (storage != null)			return storage;		// Now look for a property with the right name.		return createStorage(id);	}	/**	 * Get a map view of all known storages.	 * 	 * @return the map	 */	public static Map<String, ProductStorage> getStorageMap() {		return getInstance()._storages;	}	/**	 * Return the default storage as defined by the property	 * <code>hcss.ia.pal.defaultstore</code>, or <code>null</code> if that	 * property is undefined.	 * 	 * 	 * @return a default storage	 * 	 * @deprecated // SCR-4311	 */	public static ProductStorage getDefault() {		return getInstance().getDefaultStorage();	}	private ProductStorage getDefaultStorage() {		return _storages				.get(Configuration						.getProperty("hcss.ia.pal.defaultstore"));	}	// Create a storage from a property.	private ProductStorage createStorage(String id) {		// Look for a property with the right name		String propName = PROP_ROOT + id;		/* Does it look like a list rather than a script? */		List list = null;		try {			list = Configuration.getList(propName);		}		catch (ConfigurationException x) {			// Assume it's a script			String script = Configuration.getProperty(propName);			if (script == null) {				throw new IllegalArgumentException("No storage with name " + id);			}			LOG.info("Getting storage from script " + script);			ProductStorage storage = getStorageFromScript(id, script);			_storages.put(id, storage);			return storage;		}		LOG.info("Getting storage from list " + id);		ProductStorage storage = new ProductStorage();		for (Iterator i = list.iterator(); i.hasNext();) {			String poolId = (String) i.next();			try {				storage.register(PoolManager.getPool(poolId));			}			catch (ConfigurationException e) {				LOG.warning("Error configuring pool " + poolId + ": "						+ e.getMessage());				e.printStackTrace();			}		}		_storages.put(id, storage);		return storage;	}	public static ProductStorage getStorageFromScript(String storeKey,			String script) {		/* Read in configuration file depending on type */		if (script.endsWith(".py")) {			return JYTHON_READER.getStorage(script);		}		/* Read in configuration file depending on type */		else if (script.endsWith(".xml")) {			return XML_READER.getStorage(script);		}		throw new IllegalArgumentException(				"Cannot determine format for script file " + script);	}	/**	 * Returns an instance of a StorageManager.	 * 	 * @return the instance	 */	public static StorageManager getInstance() {		if (INSTANCE == null) {			INSTANCE = new StorageManager();			INSTANCE.init();		}		return INSTANCE;	}}